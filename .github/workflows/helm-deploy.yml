name: Helm Deploy

on:
  push:
    branches: [ staging ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment (e.g., prod)"
        required: true
        default: "prod"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: devops-cicd
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    # ────────── Git / AKS context ──────────
    - name: Checkout
      uses: actions/checkout@v4

    - name: Azure CLI login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      run: |
        az aks get-credentials \
          --resource-group rg-devops-cicd-${{ env.ENVIRONMENT }} \
          --name          aks-devops-cicd-${{ env.ENVIRONMENT }}

    # ────────── Namespace & image‑pull secret ──────────
    - name: Prepare namespace
      run: |
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        kubectl create secret docker-registry ghcr \
          --docker-server=ghcr.io \
          --docker-username=${{ secrets.TF_VAR_GITHUB_USERNAME }} \
          --docker-password=${{ secrets.TF_VAR_GITHUB_TOKEN }} \
          --namespace $NAMESPACE \
          --dry-run=client -o yaml | kubectl apply -f -

    # ────────── Vérifier l’add‑on AKS ──────────
    - name: Detect AKS KeyVault add‑on
      id: addon
      run: |
        flag=$(az aks show \
          --resource-group rg-devops-cicd-${{ env.ENVIRONMENT }} \
          --name          aks-devops-cicd-${{ env.ENVIRONMENT }} \
          --query "addonProfiles.azureKeyvaultSecretsProvider.enabled" -o tsv 2>/dev/null || echo "false")
        echo "addonEnabled=$flag" >> "$GITHUB_OUTPUT"

    # ────────── Nettoyage des anciens charts ──────────
    - name: Uninstall legacy Helm releases
      if: steps.addon.outputs.addonEnabled == 'false'
      run: |
        helm uninstall azure-keyvault-provider -n kube-system || true
        helm uninstall csi-secrets-store   -n kube-system || true
        # Attendre la suppression effective des DaemonSets/Pods
        kubectl delete daemonset -n kube-system -l app=csi-secrets-store-provider-azure --ignore-not-found
        kubectl delete daemonset -n kube-system -l app=secrets-store-csi-driver       --ignore-not-found
        kubectl wait --for=delete pod -n kube-system -l app=csi-secrets-store-provider-azure --timeout=120s || true

    # ────────── Installation du chart seulement si nécessaire ──────────
    - name: Install Azure Key Vault provider (Helm)
      if: steps.addon.outputs.addonEnabled == 'false'
      run: |
        helm repo add csi-secrets-store-provider-azure \
          https://azure.github.io/secrets-store-csi-driver-provider-azure/charts
        helm repo update
        helm upgrade --install azure-keyvault-provider \
          csi-secrets-store-provider-azure/csi-secrets-store-provider-azure \
          --namespace kube-system \
          --set secrets-store-csi-driver.syncSecret.enabled=true \
          --set secrets-store-csi-driver.enableSecretRotation=true \
          --set metricsAddr="8899" \ 
          --wait

    # ────────── Attente des pods (sécurisée) ──────────
    - name: Wait for provider pods (if chart was installed)
      if: steps.addon.outputs.addonEnabled == 'false'
      run: |
        echo "Waiting up to 5 min for provider pods…"
        kubectl -n kube-system wait --for=condition=ready pod \
          -l app=csi-secrets-store-provider-azure \
          --timeout=300s

    # ────────── Vos charts applicatifs ──────────
    - name: Helm upgrade backend
      run: |
        helm upgrade --install backend ./helm/backend \
          --set keyvaultName=kv-devops-cicd-${{ env.ENVIRONMENT }} \
          --set tenantId=${{ secrets.ARM_TENANT_ID }} \
          --set clientId=${{ secrets.ARM_CLIENT_ID }} \
          --namespace $NAMESPACE

    - name: Helm upgrade frontend
      run: |
        helm upgrade --install frontend ./helm/frontend --namespace $NAMESPACE
