name: Helm Deploy

on:
  push:
    branches:
      - staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment (e.g., prod)'
        required: true
        default: 'prod'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: devops-cicd
      ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        run: |
          az aks get-credentials \
            --resource-group rg-devops-cicd-${{ env.ENVIRONMENT }} \
            --name aks-devops-cicd-${{ env.ENVIRONMENT }}

      - name: Create namespace
        run: |
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Create image pull secret
        run: |
          kubectl create secret docker-registry ghcr \
            --docker-server=ghcr.io \
            --docker-username=${{ secrets.TF_VAR_GITHUB_USERNAME }} \
            --docker-password=${{ secrets.TF_VAR_GITHUB_TOKEN }} \
            --namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Remove conflicting cluster-scoped resources
        run: |
          kubectl delete clusterrole secretproviderrotation-role --ignore-not-found
          kubectl delete clusterrolebinding secretproviderrotation-rolebinding --ignore-not-found

      - name: Install Secrets Store CSI Driver with CRDs
        run: |
          helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
          helm repo update
          helm upgrade --install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver \
            --namespace kube-system \
            --set syncSecret.enabled=true \
            --set enableSecretRotation=true \
            --wait

      - name: Install Azure Key Vault Provider
        run: |
          helm repo add csi-secrets-store-provider-azure https://azure.github.io/secrets-store-csi-driver-provider-azure/charts
          helm repo update
          helm upgrade --install azure-keyvault-provider csi-secrets-store-provider-azure/csi-secrets-store-provider-azure \
            --namespace kube-system \
            --set controller.serviceAccount.create=false \
            --set controller.serviceAccount.name=secrets-store-csi-driver \
            --wait

          echo "Waiting for the Azure provider pods to be ready..."
          kubectl -n kube-system wait --for=condition=ready pod -l app=csi-secrets-store-provider-azure --timeout=60s

      - name: Wait for SecretProviderClass CRD to be ready
        run: |
          echo "Waiting for CRD secretproviderclasses.secrets-store.csi.x-k8s.io..."
          until kubectl get crd secretproviderclasses.secrets-store.csi.x-k8s.io; do sleep 5; done

      - name: Helm upgrade backend
        run: |
          helm upgrade --install backend ./helm/backend \
            --set keyvaultName=kv-devops-cicd-${{ env.ENVIRONMENT }} \
            --set tenantId=${{ secrets.ARM_TENANT_ID }} \
            --set clientId=${{ secrets.ARM_CLIENT_ID }} \
            --namespace $NAMESPACE

      - name: Debug CSI setup
        run: |
          echo "Checking CSI driver pods..."
          kubectl get pods -n kube-system -l app=secrets-store-csi-driver

          echo "Checking Azure provider pods..."
          kubectl get pods -n kube-system -l app=csi-secrets-store-provider-azure

          echo "Checking SecretProviderClass..."
          kubectl get secretproviderclass -n $NAMESPACE
          kubectl describe secretproviderclass azure-keyvault-backend -n $NAMESPACE

      - name: Helm upgrade frontend
        run: |
          helm upgrade --install frontend ./helm/frontend \
            --namespace $NAMESPACE
